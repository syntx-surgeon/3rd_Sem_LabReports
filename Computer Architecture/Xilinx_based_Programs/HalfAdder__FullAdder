
=========HALF ADDER===========


VHDL code for half adder

 entity half_addlab is
    Port ( a : in  STD_LOGIC;
           b : in  STD_LOGIC;
           sum : out  STD_LOGIC;
           carry : out  STD_LOGIC);
end half_addlab;

architecture Behavioral of half_addlab is
begin
sum <= a xor b;
carry <= a and b;
end Behavioral; 




Half adder Test bench
 stim_proc: process
   begin	
	a<= '0'; 	b<= '0'; wait for 100 ns;	
	a<= '0'; 	b<= '1'; wait for 100 ns;	
	a<= '1'; 	b<= '0'; wait for 100 ns;	
	a<= '1'; 	b<= '1'; wait for 100 ns;	
        end process;

END;




=====Full adder: 3 inputs & 2 outputs======
     library IEEE;
     use IEEE.STD_LOGIC_1164.ALL;

    entity fullAdder is
    Port ( A : in  STD_LOGIC;
           B : in  STD_LOGIC;
           Cin : in  STD_LOGIC;
           SUM : out  STD_LOGIC;
           Cout : out  STD_LOGIC);
end fullAdder;

architecture Behavioral of fullAdder is
begin
    SUM <= A XOR B XOR Cin;
    Cout <= (A AND B) OR (B AND Cin) OR (Cin AND A);
end Behavioral;




Testbench

   stim_proc: process
   begin
        A <= '0'; B <= '0'; Cin <= '0'; wait for 100 ns;
        A <= '0'; B <= '0'; Cin <= '1'; wait for 100 ns;
        A <= '0'; B <= '1'; Cin <= '0'; wait for 100 ns;
        A <= '0'; B <= '1'; Cin <= '1'; wait for 100 ns;
        A <= '1'; B <= '0'; Cin <= '0'; wait for 100 ns;
        A <= '1'; B <= '0'; Cin <= '1'; wait for 100 ns;
        A <= '1'; B <= '1'; Cin <= '0'; wait for 100 ns;
        A <= '1'; B <= '1'; Cin <= '1'; wait for 100 ns;
        wait;
   end process;
END;