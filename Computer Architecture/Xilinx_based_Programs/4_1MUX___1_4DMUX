/*************************4x1 MUX**************************/

=============4x1 mux===============

--I0,I1,I2,I3 ---in
--s--in   MSB=1  LSB= 0   select  
--y---out




entity muxlab is
    Port ( I0 : in  STD_LOGIC;
           I1 : in  STD_LOGIC;
           I2 : in  STD_LOGIC;
           I3 : in  STD_LOGIC;
           S : in  STD_LOGIC_VECTOR (1 downto 0);
           Y : out  STD_LOGIC);
end muxlab;

architecture Behavioral of muxlab is

begin

Y<= I0 when s="00" else
    I1 when s="01" else
    I2 when s="10" else
    I3;
end Behavioral;


-- Test Bench for 4x1 MUX

simulation:

I0<='1'; I1<='0'; I2<='0'; I3<='1'; 
s<="00"; wait for 100ns;
s<="01"; wait for 100ns;
s<="10"; wait for 100ns;
s<="11"; wait for 100ns;

    --wait;
   end process;

END;




/***************************1x4 DEMUX**************************/

--I---in
--A,B--in   MSB=1  LSB= 0   select
--O0,O1,O2,O3---out
--y---out



entity demuxlab is
    Port ( A : in  STD_LOGIC;
           B : in  STD_LOGIC;
           I : in  STD_LOGIC;
           O : out  STD_LOGIC_VECTOR (3 downto 0));
end demuxlab;

architecture Behavioral of demuxlab is

begin
O (0) <= I and ( not A) and ( not B);
O  (1) <= I and ( not A) and ( B);
O  (2) <= I and ( A) and ( not B);
O  (3) <= I and ( A ) and ( B );

end Behavioral;



-- Test Bench for 1x4 DEMUX

simulation
begin		
		I <= '1';
		A <='0';
		B <='0';
	wait for 100 ns;

		A <='0';
		B <='1';
	wait for 100 ns;

		A <='1';
		B <='0';
	wait for 100 ns;

	  	A <='1';
		B <='1';
	wait for 100 ns;

	--wait;
   end process;

END;